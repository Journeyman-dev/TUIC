 /*
	Copyright (c) 2021 Daniel Valcour
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the "Software"), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	the Software, and to permit persons to whom the Software is furnished to do so,
	subject to the following conditions:
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <TUIC/tuic.h>
#include <glad/glad.h>
#include "objects.h"
#include "opengl33.h"
#define GLD_IMPLEMENTATION
#include "vendor/glDebug.h"

const float kOpenglScreenMatrix[16] =
{
	2.0f,  0.0f,  0.0f,  -1.0f,
	0.0f,  -2.0f,  0.0f, 1.0f,
	0.0f,  0.0f,  1.0f,  0.0f,
	0.0f,  0.0f,  0.0f,  1.0f
};
typedef struct TuiOpengl33InstanceApiData
{
	uint32_t VaoHandle;
	uint32_t FramebufferRenderProgramHandle;
	uint32_t FramebufferRenderMatrixUniformLocation;
	uint32_t FramebufferRenderTextureUniformLocation;
	uint32_t BatchRenderProgramHandle;
	uint32_t BatchRenderScreenTileDimensionsUniformLocation;
	uint32_t BatchRenderSheetTileDimensionsUniformLocation;
	uint32_t BatchRenderSheetTileUVDimensionsUniformLocation;
	uint32_t BatchRenderScreenspaceTileDimensionsUniformLocation;
	uint32_t BatchRenderGlyphModeUniformLocation;
	uint32_t BatchRenderColorModeUniformLocation;
	uint32_t BatchRenderLayoutModeUniformLocation;
	uint32_t BatchRenderAtlasTypeUniformLocation;
	uint32_t BatchRenderPaletteChannelCountUniformLocation;
	uint32_t BatchRenderIsLargeSparseWideUniformLocation;
	uint32_t BatchRenderIsLargeSparseTallUniformLocation;
	uint32_t BatchRenderTileByteSizeUniformLocation;
	uint32_t BatchRenderDataUniformLocation;
	uint32_t BatchRenderFontmapUniformLocation;
	uint32_t BatchRenderPaletteUniformLocation;
	uint32_t BatchRenderMatrixUniformLocation;
	uint32_t BatchRenderAtlasUniformLocation;
	uint32_t BatchRenderBlendModeUniformLocation;
	uint32_t DataBufferHandle;
	uint32_t DataTextureHandle;
} TuiOpengl33InstanceApiData;
typedef struct TuiOpengl33GlyphAtlasApiData
{
	uint32_t SheetTextureHandle;
	uint32_t FontmapBufferHandle;
	uint32_t FontmapTextureHandle;
} TuiOpengl33GlyphAtlasApiData;
typedef struct TuiOpengl33TextureApiData
{
	uint32_t TextureHandle;
	size_t PixelWidth;
	size_t PixelHeight;
	size_t ChannelCount;
} TuiOpengl33TextureApiData;
typedef struct TuiOpengl33PaletteApiData
{
	uint32_t PaletteTextureHandle;
	uint32_t PaletteBufferHandle;
} TuiOpengl33PaletteApiData;
typedef struct TuiOpengl33PanelApiData
{
	uint32_t FramebufferHandle;
	uint32_t FramebufferTextureHandle;
	uint32_t RenderbufferHandle;
} TuiOpengl33PanelApiData;
@OPENGL33_GLSL_SHADERS@

//Function for the callback for forwarding glDebug debug messages into the TUIC debug message callback system.
void gld_message(const char* a, const char* b)
{
	const char* message_front = "glDebug:\n";
	const char* message_seperator = "\nStatment: ";
	char combined_message[2048];
	strcpy(combined_message, message_front);
	strcat(combined_message, a);
	strcat(combined_message, message_seperator);
	strcat(combined_message, b);
	tuiDebugError(TUI_ERROR_BACKEND_SPECIFIC, combined_message);
}
inline void CreateFramebuffer(uint32_t* framebuffer_handle, uint32_t* texture_handle, uint32_t* renderbuffer_handle, size_t width, size_t height)
{
	GLD_CLEAR();
	GLD_CALL(glGenFramebuffers(1, framebuffer_handle));
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, *framebuffer_handle));
	GLD_CALL(glGenTextures(1, texture_handle));
	GLD_CALL(glBindTexture(GL_TEXTURE_2D, *texture_handle));
	GLD_CALL(glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST));
	GLD_CALL(glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, *texture_handle, 0));
	GLD_CALL(glGenRenderbuffers(1, renderbuffer_handle));
	GLD_CALL(glBindRenderbuffer(GL_RENDERBUFFER, *renderbuffer_handle));
	GLD_CALL(glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH32F_STENCIL8, width, height));
	GLD_CALL(glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, *renderbuffer_handle));
	GLD_CALL(uint32_t status = glCheckFramebufferStatus(GL_FRAMEBUFFER));
	if (status != GL_FRAMEBUFFER_COMPLETE)
	{
		tuiDebugError(TUI_ERROR_BACKEND_SPECIFIC, "Framebuffer not complete!");
	}
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, 0));
}
//Create a shader program using the given vertex and fragment shader sources, and return its handle.
inline uint32_t CreateProgram(const char** vertex_source, const char** fragment_source)
{
	uint32_t handle = 0;
	int gl_vertex_shader, gl_fragment_shader;
	GLD_CLEAR();
	GLD_CALL(gl_vertex_shader = glCreateShader(GL_VERTEX_SHADER));
	GLD_CALL(glShaderSource(gl_vertex_shader, 1, vertex_source, NULL));
	GLD_COMPILE(gl_vertex_shader);
	GLD_CALL(gl_fragment_shader = glCreateShader(GL_FRAGMENT_SHADER));
	GLD_CALL(glShaderSource(gl_fragment_shader, 1, fragment_source, NULL));
	GLD_COMPILE(gl_fragment_shader);
	GLD_CALL(handle = glCreateProgram());
	GLD_CALL(glAttachShader(handle, gl_vertex_shader));
	GLD_CALL(glAttachShader(handle, gl_fragment_shader));
	GLD_LINK(handle);
	GLD_CALL(glDetachShader(handle, gl_vertex_shader));
	GLD_CALL(glDetachShader(handle, gl_fragment_shader));
	GLD_CALL(glDeleteShader(gl_vertex_shader));
	GLD_CALL(glDeleteShader(gl_fragment_shader));
	return handle;
}
inline uint32_t GetGlTextureFormatFromChannels(size_t channels)
{
	switch (channels)
	{
	case 3:
		return GL_RGB;
	case 4:
		return GL_RGBA;
	default:
		tuiDebugError(TUI_ERROR_BACKEND_SPECIFIC, "Can not get texture format from invalid channel count.");
		return 0;
	}
}
inline uint32_t GetGlInternalFormatFromChannels(size_t channels)
{
	switch (channels)
	{
	case 3:
		return GL_RGB8;
	case 4:
		return GL_RGBA8;
	default:
		tuiDebugError(TUI_ERROR_BACKEND_SPECIFIC, "Can not get internal format from invalid channel count.");
		return 0;
	}
}
inline uint32_t GetGlFilterModeFromEnum(int filter_mode)
{
	switch (filter_mode)
	{
		case TUI_FILTER_POINT:
			return GL_NEAREST;
		case TUI_FILTER_BILINEAR:
			return GL_LINEAR;
		default:
			tuiDebugError(TUI_ERROR_BACKEND_SPECIFIC, "Can not get filter mode from invalid enum.");
			return 0;
	}
}
inline uint32_t CreateTexture(size_t width, size_t height, size_t channels, const uint8_t* pixels, int filter_mode)
{
	uint32_t gl_texture_handle = 0;
	uint32_t gl_texture_format = GetGlTextureFormatFromChannels(channels);
	uint32_t gl_internal_format = GetGlInternalFormatFromChannels(channels);
	uint32_t gl_filter_mode = GetGlFilterModeFromEnum(filter_mode);
	GLD_CLEAR(); 
	GLD_CALL(glGenTextures(1, &gl_texture_handle));
	GLD_CALL(glBindTexture(GL_TEXTURE_2D, gl_texture_handle));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, gl_filter_mode));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, gl_filter_mode));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0));
	GLD_CALL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0));
	GLD_CALL(glTexImage2D(GL_TEXTURE_2D, 0, gl_internal_format, width, height, 0, gl_texture_format, GL_UNSIGNED_BYTE, pixels));
	return gl_texture_handle;
}
//Transform an opengl screen matrix so that a rectangle using it is flat facing the screen and its 2d edges match the screen space pixel coordinates given.
inline void TransformMatrix(float* matrix, size_t screen_width, size_t screen_height, int left_x, int right_x, int top_y, int bottom_y)
{
	float width = right_x - left_x;
	float height = bottom_y - top_y;
	float width_scalar = (width / ((float)screen_width));
	float height_scalar = (height / ((float)screen_height));
	float x_translate = (left_x / (float)screen_width) * 2.0f;
	float y_translate = (top_y / (float)screen_height) * 2.0f;
	matrix[0] *= width_scalar;
	matrix[5] *= height_scalar;
	matrix[3] += x_translate;
	matrix[7] -= y_translate;
}
const int kVertsPerTile = 6;
inline int GetGlyphModeUniformValue(int glyph_mode)
{
	switch (glyph_mode)
	{
	case TUI_GLYPH_FLAG_G8:
		return 0;
	case TUI_GLYPH_FLAG_G16:
		return 1;
	default:
		return 0;
	}
}
inline int GetColorModeUniformValue(int color_mode)
{
	switch (color_mode)
	{
	case TUI_COLOR_FLAG_C0:
		return 0;
	case TUI_COLOR_FLAG_C4:
		return 1;
	case TUI_COLOR_FLAG_C8:
		return 2;
	case TUI_COLOR_FLAG_C8NBG:
		return 3;
	case TUI_COLOR_FLAG_C8NFG:
		return 4;
	case TUI_COLOR_FLAG_C24:
		return 5;
	case TUI_COLOR_FLAG_C24NBG:
		return 6;
	case TUI_COLOR_FLAG_C24NFG:
		return 7;
	case TUI_COLOR_FLAG_C32:
		return 8;
	case TUI_COLOR_FLAG_C32NBG:
		return 9;
	case TUI_COLOR_FLAG_C32NFG:
		return 10;
	default:
		return 0;
	}
}
inline int GetLayoutModeUniformValue(int layout_mode)
{
	switch (layout_mode)
	{
	case TUI_LAYOUT_FLAG_FULL:
		return 0;
	case TUI_LAYOUT_FLAG_SPARSE:
		return 1;
	default:
		return 0;
	}
}
inline int GetAtlasTypeUniformValue(int atlas_type)
{
	switch (atlas_type)
	{
	case TUI_ATLAS_GRID:
		return 0;
	case TUI_ATLAS_COORDS:
		return 1;
	default:
		return 0;
	}
}
inline int GetBlendModeUniformValue(int blend_mode)
{
	switch (blend_mode)
	{
	case TUI_BLEND_BG_RED:
		return 0;
	case TUI_BLEND_BG_GREEN:
		return 1;
	case TUI_BLEND_BG_BLUE:
		return 2;
	case TUI_BLEND_BG_ALPHA:
		return 3;
	case TUI_BLEND_FG_RED:
		return 4;
	case TUI_BLEND_FG_GREEN:
		return 5;
	case TUI_BLEND_FG_BLUE:
		return 6;
	case TUI_BLEND_FG_ALPHA:
		return 7;
	case TUI_BLEND_NORMAL:
		return 8;
	default:
		return 0;
	}
}
inline void DrawBatchData(uint32_t framebuffer_handle, size_t framebuffer_width, size_t framebuffer_height, TuiInstance instance, TuiGlyphAtlas atlas, TuiPalette palette, size_t detail_mode, size_t blend_mode, size_t tiles_wide, size_t tiles_tall, size_t sparse_index, const uint8_t* batch_data, const float* matrix)
{
	TuiOpengl33GlyphAtlasApiData* atlas_data = (TuiOpengl33GlyphAtlasApiData*)atlas->ApiData;
	TuiOpengl33PaletteApiData* palette_data = NULL;

	if (palette != NULL)
	{
		palette_data = (TuiOpengl33PaletteApiData*)palette->ApiData;
	}
	TuiOpengl33InstanceApiData* instance_data = (TuiOpengl33InstanceApiData*)instance->ApiData;
	size_t data_size = 0;
	int is_sparse = tuiDetailHasFlag(detail_mode, TUI_LAYOUT_FLAG_SPARSE);
	int glyph_mode = tuiDetailGetGlyphFlag(detail_mode);
	int color_mode = tuiDetailGetColorFlag(detail_mode);
	int layout_mode = tuiDetailGetLayoutFlag(detail_mode);
	int glyph_mode_id = GetGlyphModeUniformValue(glyph_mode);
	int color_mode_id = GetColorModeUniformValue(color_mode);
	int layout_mode_id = GetLayoutModeUniformValue(layout_mode);
	int atlas_type_id = GetAtlasTypeUniformValue(atlas->AtlasType);
	int blend_mode_id = GetBlendModeUniformValue(blend_mode);
	size_t bytes_per_tile = tuiDetailGetTileByteSize(glyph_mode, color_mode);
	int large_sparse_wide = (tiles_wide > 256) ? 1 : 0;
	int large_sparse_tall = (tiles_tall > 256) ? 1 : 0;
	if (is_sparse == TUI_TRUE)
	{
		bytes_per_tile += large_sparse_wide + large_sparse_tall + 2;
		data_size = sparse_index * bytes_per_tile;
	}
	else
	{
		data_size = tiles_wide * tiles_tall * bytes_per_tile;
	}
	GLD_CLEAR();
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, framebuffer_handle));
	GLD_CALL(glBindVertexArray(instance_data->VaoHandle));
	GLD_CALL(glUseProgram(instance_data->BatchRenderProgramHandle));
	GLD_CALL(glUniform2i(instance_data->BatchRenderScreenTileDimensionsUniformLocation, tiles_wide, tiles_tall));
	GLD_CALL(glUniform2f(instance_data->BatchRenderScreenspaceTileDimensionsUniformLocation, 1.0f / (float)tiles_wide, 1.0f / (float)tiles_tall));
	GLD_CALL(glUniform1i(instance_data->BatchRenderGlyphModeUniformLocation, glyph_mode_id));
	GLD_CALL(glUniform1i(instance_data->BatchRenderColorModeUniformLocation, color_mode_id));
	GLD_CALL(glUniform1i(instance_data->BatchRenderLayoutModeUniformLocation, layout_mode_id));
	GLD_CALL(glUniform1i(instance_data->BatchRenderAtlasTypeUniformLocation, atlas_type_id));
	if (palette != NULL)
	{
		GLD_CALL(glUniform1i(instance_data->BatchRenderPaletteChannelCountUniformLocation, palette->ChannelCount));
	}
	GLD_CALL(glUniform1i(instance_data->BatchRenderBlendModeUniformLocation, blend_mode_id));
	GLD_CALL(glUniformMatrix4fv(instance_data->BatchRenderMatrixUniformLocation, 1, GL_FALSE, matrix));
	if (instance_data->DataBufferHandle == 0)
	{
		GLD_CALL(glGenBuffers(1, &instance_data->DataBufferHandle));
	}
	GLD_CALL(glBindBuffer(GL_TEXTURE_BUFFER, instance_data->DataBufferHandle));
	GLD_CALL(glBufferData(GL_TEXTURE_BUFFER, data_size, batch_data, GL_STREAM_DRAW));
	if (instance_data->DataTextureHandle == 0)
	{
		GLD_CALL(glGenTextures(1, &instance_data->DataTextureHandle));
		GLD_CALL(glBindTexture(GL_TEXTURE_BUFFER, instance_data->DataTextureHandle));
		GLD_CALL(glTexBuffer(GL_TEXTURE_BUFFER, GL_R8UI, instance_data->DataBufferHandle));
	}
	GLD_CALL(glBindBuffer(GL_TEXTURE_BUFFER, 0));
	GLD_CALL(glActiveTexture(GL_TEXTURE0));
	GLD_CALL(glBindTexture(GL_TEXTURE_2D, atlas_data->SheetTextureHandle));
	if (atlas->AtlasType == TUI_ATLAS_GRID)
	{
		GLD_CALL(glUniform2f(instance_data->BatchRenderSheetTileUVDimensionsUniformLocation, 1.0f/(float)atlas->GridGlyphsWide, 1.0f/(float)atlas->GridGlyphsTall));
		GLD_CALL(glUniform2i(instance_data->BatchRenderSheetTileDimensionsUniformLocation, atlas->GridGlyphsWide, atlas->GridGlyphsTall));
	}
	else //if (atlas->AtlasType == TUI_ATLAS_COORDS)
	{
		GLD_CALL(glActiveTexture(GL_TEXTURE1));
		GLD_CALL(glBindTexture(GL_TEXTURE_BUFFER, atlas_data->FontmapTextureHandle));
	}
	GLD_CALL(glActiveTexture(GL_TEXTURE2));
	GLD_CALL(glBindTexture(GL_TEXTURE_BUFFER, instance_data->DataTextureHandle));
	if (palette != NULL)
	{
		GLD_CALL(glActiveTexture(GL_TEXTURE3));
		GLD_CALL(glBindTexture(GL_TEXTURE_BUFFER, palette_data->PaletteTextureHandle));
	}
	GLD_CALL(glViewport(0, 0, framebuffer_width, framebuffer_height));
	if (is_sparse == TUI_FALSE)
	{
		GLD_CALL(glUniform1i(instance_data->BatchRenderTileByteSizeUniformLocation, bytes_per_tile));
		GLD_CALL(glEnable(GL_BLEND));
		GLD_CALL(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));
		GLD_CALL(glDrawArrays(GL_TRIANGLES, 0, tiles_wide * tiles_tall * kVertsPerTile));
	}
	else
	{
		GLD_CALL(glUniform1i(instance_data->BatchRenderTileByteSizeUniformLocation, bytes_per_tile));
		GLD_CALL(glUniform1i(instance_data->BatchRenderIsLargeSparseWideUniformLocation, large_sparse_wide));
		GLD_CALL(glUniform1i(instance_data->BatchRenderIsLargeSparseTallUniformLocation, large_sparse_tall));
		GLD_CALL(glEnable(GL_BLEND));
		GLD_CALL(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));
		GLD_CALL(glDrawArrays(GL_TRIANGLES, 0, sparse_index * kVertsPerTile));
	}
}
inline void RenderTextureToFramebuffer(TuiInstance instance, uint32_t texture_handle, uint32_t framebuffer_handle, size_t render_area_width, size_t render_area_height, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33InstanceApiData* instance_data = (TuiOpengl33InstanceApiData*)instance->ApiData;
	float matrix[16];
	memcpy(matrix, kOpenglScreenMatrix, 16 * sizeof(float));
	TransformMatrix(matrix, render_area_width, render_area_height, left_x, right_x, top_y, bottom_y);
	GLD_CLEAR();
	GLD_CALL(glEnable(GL_BLEND));
	GLD_CALL(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, framebuffer_handle));
	GLD_CALL(glBindVertexArray(instance_data->VaoHandle));
	GLD_CALL(glUseProgram(instance_data->FramebufferRenderProgramHandle));
	GLD_CALL(glActiveTexture(GL_TEXTURE0));
	GLD_CALL(glBindTexture(GL_TEXTURE_2D, texture_handle));
	GLD_CALL(glUniformMatrix4fv(instance_data->FramebufferRenderMatrixUniformLocation, 1, GL_FALSE, matrix));
	GLD_CALL(glViewport(0, 0, render_area_width, render_area_height));
	GLD_CALL(glDrawArrays(GL_TRIANGLES, 0, 6));
}
inline void VerticalFlipPixels(uint8_t* pixels, int w, int h, int c)
{
   int row;
   size_t bytes_per_row = (size_t)w * c;
   uint8_t temp[2048];

   for (row = 0; row < (h>>1); row++) {
      uint8_t *row0 = pixels + row*bytes_per_row;
      uint8_t *row1 = pixels + (h - row - 1)*bytes_per_row;
      // swap row0 with row1
      size_t bytes_left = bytes_per_row;
      while (bytes_left) {
         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);
         memcpy(temp, row0, bytes_copy);
         memcpy(row0, row1, bytes_copy);
         memcpy(row1, temp, bytes_copy);
         row0 += bytes_copy;
         row1 += bytes_copy;
         bytes_left -= bytes_copy;
      }
   }
}
//Opengl33 specific (non-callback).
TuiInstance tuiOpengl33InstanceCreateExistingContext(TuiInstance instance)
{
	instance->ApiData = (TuiOpengl33InstanceApiData*)tuiAllocate(sizeof(TuiOpengl33InstanceApiData));
	TuiOpengl33InstanceApiData* instance_data = (TuiOpengl33InstanceApiData*)instance->ApiData;
	instance_data->VaoHandle = 0;
	instance_data->DataBufferHandle = 0;
	instance_data->DataTextureHandle = 0;
	GLD_SET_CALLBACK(gld_message);
	GLD_CLEAR();
	const char* vertex_shader = kShader_opengl33_renderer_vertex;
	const char* fragment_shader = kShader_opengl33_renderer_fragment;
	instance_data->FramebufferRenderProgramHandle = CreateProgram(&vertex_shader, &fragment_shader);
	GLD_CALL(glGenVertexArrays(1, &instance_data->VaoHandle));
	GLD_CALL(glBindVertexArray(instance_data->VaoHandle));
	GLD_CALL(glUseProgram(instance_data->FramebufferRenderProgramHandle));
	GLD_CALL(instance_data->FramebufferRenderTextureUniformLocation = glGetUniformLocation(instance_data->FramebufferRenderProgramHandle, "Texture"));
	GLD_CALL(glUniform1i(instance_data->FramebufferRenderTextureUniformLocation, 0));
	GLD_CALL(instance_data->FramebufferRenderMatrixUniformLocation = glGetUniformLocation(instance_data->FramebufferRenderProgramHandle, "Matrix"));
	vertex_shader = kShader_opengl33_batch_vertex;
	fragment_shader = kShader_opengl33_batch_fragment;
	instance_data->BatchRenderProgramHandle = CreateProgram(&vertex_shader, &fragment_shader);
	GLD_CALL(instance_data->BatchRenderScreenTileDimensionsUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "ScreenTileDimensions"));
	GLD_CALL(instance_data->BatchRenderSheetTileDimensionsUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "SheetTileDimensions"));
	GLD_CALL(instance_data->BatchRenderSheetTileUVDimensionsUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "SheetTileUVDimensions"));
	GLD_CALL(instance_data->BatchRenderScreenspaceTileDimensionsUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "ScreenspaceTileDimensions"));
	GLD_CALL(instance_data->BatchRenderGlyphModeUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "GlyphMode"));
	GLD_CALL(instance_data->BatchRenderColorModeUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "ColorMode"));
	GLD_CALL(instance_data->BatchRenderLayoutModeUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "LayoutMode"));
	GLD_CALL(instance_data->BatchRenderAtlasTypeUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "AtlasType"));
	GLD_CALL(instance_data->BatchRenderPaletteChannelCountUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "PaletteChannelCount"));
	GLD_CALL(instance_data->BatchRenderIsLargeSparseWideUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "IsLargeSparseWide"));
	GLD_CALL(instance_data->BatchRenderIsLargeSparseTallUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "IsLargeSparseTall"));
	GLD_CALL(instance_data->BatchRenderTileByteSizeUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "TileByteSize"));
	GLD_CALL(instance_data->BatchRenderDataUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "Data"));
	GLD_CALL(instance_data->BatchRenderFontmapUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "Fontmap"));
	GLD_CALL(instance_data->BatchRenderPaletteUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "Palette"));
	GLD_CALL(instance_data->BatchRenderMatrixUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "Matrix"));
	GLD_CALL(instance_data->BatchRenderAtlasUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "Atlas"));
	GLD_CALL(instance_data->BatchRenderBlendModeUniformLocation = glGetUniformLocation(instance_data->BatchRenderProgramHandle, "BlendMode"));
	GLD_CALL(glUseProgram(instance_data->BatchRenderProgramHandle));
	GLD_CALL(glUniform1i(instance_data->BatchRenderAtlasUniformLocation, 0));
	GLD_CALL(glUniform1i(instance_data->BatchRenderFontmapUniformLocation, 1));
	GLD_CALL(glUniform1i(instance_data->BatchRenderDataUniformLocation, 2));
	GLD_CALL(glUniform1i(instance_data->BatchRenderPaletteUniformLocation, 3));
	GLD_CALL(glUseProgram(0));
	GLD_CALL(glBindVertexArray(0));
	instance;
}
void tuiInstanceCreate_Opengl33(TuiInstance instance, void* proc_address)
{
	if (!gladLoadGLLoader((GLADloadproc)proc_address))
	{
		tuiDebugError(TUI_ERROR_BACKEND_SPECIFIC, "Failed to initialize GLAD.");
        return;
	}    
	tuiOpengl33InstanceCreateExistingContext(instance);
}
void tuiInstanceDestroy_Opengl33(TuiInstance instance)
{
	TuiOpengl33InstanceApiData* instance_data = (TuiOpengl33InstanceApiData*)instance->ApiData;
	if (instance->IsDamaged == TUI_FALSE)
	{
		
		GLD_CALL(glDeleteProgram(instance_data->FramebufferRenderProgramHandle));
		GLD_CALL(glDeleteProgram(instance_data->BatchRenderProgramHandle));
		GLD_CALL(glDeleteVertexArrays(1, &instance_data->VaoHandle));
		if (instance_data->DataBufferHandle != 0)
		{
			GLD_CALL(glDeleteBuffers(1, &instance_data->DataBufferHandle));
		}
		if (instance_data->DataTextureHandle != 0)
		{
			GLD_CALL(glDeleteTextures(1, &instance_data->DataTextureHandle));
		}
	}
	tuiFree(instance_data);
}
void tuiInstanceResizeScreen_Opengl33(TuiInstance instance, size_t screen_width, size_t screen_height)
{
	TuiOpengl33InstanceApiData* instance_data = (TuiOpengl33InstanceApiData*)instance->ApiData;
	instance->PixelWidth = screen_width;
	instance->PixelHeight = screen_height;
	GLD_CLEAR();
	GLD_CALL(glViewport(0, 0, screen_width, screen_height));
}

void tuiInstanceDrawBatchData_Opengl33(TuiInstance instance, TuiGlyphAtlas atlas, TuiPalette palette, size_t detail_mode, size_t tiles_wide, size_t tiles_tall, size_t sparse_index, const uint8_t* batch_data, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33InstanceApiData* instance_data = (TuiOpengl33InstanceApiData*)instance->ApiData;
	float* transformed_matrix = (float*)tuiAllocate(sizeof(float) * 16);
	memcpy(transformed_matrix, &kOpenglScreenMatrix[0], 16);
	TransformMatrix(transformed_matrix, instance->PixelWidth, instance->PixelHeight, left_x, right_x, top_y, bottom_y);
	DrawBatchData(0, instance->PixelWidth, instance->PixelHeight, instance, atlas, palette, detail_mode, atlas->BlendMode, tiles_wide, tiles_tall, sparse_index, batch_data, &kOpenglScreenMatrix[0]);
	tuiFree(transformed_matrix);
}
void tuiInstanceClearColor_Opengl33(TuiInstance instance, uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
	GLD_CLEAR();
	GLD_CALL(glClearColor((float)r / 255.0f, (float)g / 255.0f, (float)b / 255.0f, (float)a / 255.0f));
	GLD_CALL(glClear(GL_COLOR_BUFFER_BIT));
}
void tuiGlyphAtlasCreate_Opengl33(TuiGlyphAtlas atlas, const uint8_t* pixel_data, const float* raw_glyph_uvs)
{
	atlas->ApiData = (TuiOpengl33GlyphAtlasApiData*)tuiAllocate(sizeof(TuiOpengl33GlyphAtlasApiData));
	TuiOpengl33GlyphAtlasApiData* atlas_data = (TuiOpengl33GlyphAtlasApiData*)atlas->ApiData;
	atlas_data->SheetTextureHandle = 0;
	atlas_data->FontmapBufferHandle = 0;
	atlas_data->FontmapTextureHandle = 0;

	GLuint gl_texture_format = GL_RGBA;
	GLuint gl_texture_internal_format = GL_RGBA8;
	switch (atlas->ChannelCount)
	{
	case 3:
		gl_texture_format = GL_RGB;
		gl_texture_internal_format = GL_RGB8;
		break;
	case 4:
		gl_texture_format = GL_RGBA;
		gl_texture_internal_format = GL_RGBA8;
		break;
	default:
		return;
	}
	atlas_data->SheetTextureHandle = CreateTexture(atlas->PixelWidth, atlas->PixelHeight, atlas->ChannelCount, pixel_data, TUI_FILTER_POINT);
	if (atlas->AtlasType == TUI_ATLAS_COORDS)
	{
		GLD_CLEAR();
		GLD_CALL(glGenBuffers(1, &atlas_data->FontmapBufferHandle));
		GLD_CALL(glBindBuffer(GL_TEXTURE_BUFFER, atlas_data->FontmapBufferHandle));
		GLD_CALL(glBufferData(GL_TEXTURE_BUFFER, atlas->GlyphCount * 4 * sizeof(float), raw_glyph_uvs, GL_STATIC_DRAW));
		GLD_CALL(glGenTextures(1, &atlas_data->FontmapTextureHandle));
		GLD_CALL(glBindTexture(GL_TEXTURE_BUFFER, atlas_data->FontmapTextureHandle));
		GLD_CALL(glTexBuffer(GL_TEXTURE_BUFFER, GL_RGBA32F, atlas_data->FontmapBufferHandle));
	}
}
void tuiGlyphAtlasDestroy_Opengl33(TuiGlyphAtlas atlas)
{
	TuiOpengl33GlyphAtlasApiData* atlas_data = (TuiOpengl33GlyphAtlasApiData*)atlas->ApiData;
	if (atlas->Instance->IsDamaged == TUI_FALSE)
	{
		GLD_CLEAR();
		if (atlas->AtlasType == TUI_ATLAS_COORDS)
		{
			GLD_CALL(glDeleteBuffers(1, &atlas_data->FontmapBufferHandle));
			GLD_CALL(glDeleteTextures(1, &atlas_data->FontmapTextureHandle));
		}
		GLD_CALL(glDeleteTextures(1, &atlas_data->SheetTextureHandle));
	}
	tuiFree(atlas_data);
}
void tuiTextureCreate_Opengl33(TuiTexture texture, const uint8_t* pixels)
{
	texture->ApiData = (TuiOpengl33TextureApiData*)tuiAllocate(sizeof(TuiOpengl33TextureApiData));
	TuiOpengl33TextureApiData* texture_data = (TuiOpengl33TextureApiData*)texture->ApiData;
	
	texture_data->TextureHandle = CreateTexture(texture->PixelWidth, texture->PixelHeight, texture->ChannelCount, pixels, texture->FilterMode);
	texture_data->PixelWidth = texture->PixelWidth;
	texture_data->PixelHeight = texture->PixelHeight;
	texture_data->ChannelCount = texture->ChannelCount;
}
void tuiTextureDestroy_Opengl33(TuiTexture texture)
{
	TuiOpengl33TextureApiData* texture_data = (TuiOpengl33TextureApiData*)texture->ApiData;
	if (texture->Instance->IsDamaged == TUI_FALSE)
	{
		GLD_CLEAR();
		GLD_CALL(glDeleteTextures(1, &texture_data->TextureHandle));
	}
	tuiFree(texture_data);
}
void tuiTextureSetPixels_Opengl33(TuiTexture texture, const uint8_t* pixels)
{
	TuiOpengl33TextureApiData* texture_data = (TuiOpengl33TextureApiData*)texture->ApiData;
	
	GLD_CLEAR();
	if (texture->PixelWidth == texture_data->PixelWidth && texture->PixelHeight == texture_data->PixelHeight && texture->ChannelCount == texture_data->ChannelCount)
	{
		GLD_CALL(glTexSubImage2D(texture_data->TextureHandle, 0, 0, 0, texture->PixelWidth, texture->PixelHeight, GetGlTextureFormatFromChannels(texture->ChannelCount), GL_UNSIGNED_BYTE, pixels)); //We can use glSubImage2D because its faster when no resizing.
	}
	else
	{
		texture_data->PixelWidth = texture->PixelWidth;
		texture_data->PixelHeight = texture->PixelHeight;
		texture_data->ChannelCount = texture->ChannelCount;
		GLD_CALL(glTexImage2D(GL_TEXTURE_2D, 0, GetGlInternalFormatFromChannels(texture->ChannelCount), texture->PixelWidth, texture->PixelHeight, 0, GetGlTextureFormatFromChannels(texture->ChannelCount), GL_UNSIGNED_BYTE, pixels)); //Need to use this slower alternative to resize it.
	}
}
void tuiTextureRender_Opengl33(TuiTexture texture, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33TextureApiData* texture_data = (TuiOpengl33TextureApiData*)texture->ApiData;
	
	RenderTextureToFramebuffer(texture->Instance, texture_data->TextureHandle, 0, texture->Instance->PixelWidth, texture->Instance->PixelHeight, left_x, right_x, top_y, bottom_y);
}
void tuiTextureRenderToPanel_Opengl33(TuiTexture texture, TuiPanel panel, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33TextureApiData* texture_data = (TuiOpengl33TextureApiData*)texture->ApiData;
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	
	RenderTextureToFramebuffer(texture->Instance, texture_data->TextureHandle, panel_data->FramebufferHandle, panel->FramebufferWidth, panel->FramebufferHeight, left_x, right_x, top_y, bottom_y);
}
void tuiPaletteCreate_Opengl33(TuiPalette palette, const uint8_t* color_data)
{
	palette->ApiData = (TuiOpengl33PaletteApiData*)tuiAllocate(sizeof(TuiOpengl33PaletteApiData));
	TuiOpengl33PaletteApiData* palette_data = (TuiOpengl33PaletteApiData*)palette->ApiData;
	palette_data->PaletteTextureHandle = 0;
	palette_data->PaletteBufferHandle = 0;
	GLD_CLEAR();
	GLD_CALL(glGenBuffers(1, &palette_data->PaletteBufferHandle));
	GLD_CALL(glBindBuffer(GL_TEXTURE_BUFFER, palette_data->PaletteBufferHandle));
	GLD_CALL(glBufferData(GL_TEXTURE_BUFFER, palette->ColorCount * (GLsizei)palette->ChannelCount, color_data, GL_STATIC_DRAW));
	GLD_CALL(glGenTextures(1, &palette_data->PaletteTextureHandle));
	GLD_CALL(glBindTexture(GL_TEXTURE_BUFFER, palette_data->PaletteTextureHandle));
	GLD_CALL(glTexBuffer(GL_TEXTURE_BUFFER, GL_R8UI, palette_data->PaletteBufferHandle));
}
void tuiPaletteDestroy_Opengl33(TuiPalette palette)
{
	TuiOpengl33PaletteApiData* palette_data = (TuiOpengl33PaletteApiData*)palette->ApiData;
	if (palette->Instance->IsDamaged == TUI_FALSE)
	{
		GLD_CLEAR();
		GLD_CALL(glDeleteBuffers(1, &palette_data->PaletteBufferHandle));
		GLD_CALL(glDeleteTextures(1, &palette_data->PaletteTextureHandle));
	}
	tuiFree(palette_data);
}
void tuiPanelCreate_Opengl33(TuiPanel panel)
{
	panel->ApiData = (TuiOpengl33PanelApiData*)tuiAllocate(sizeof(TuiOpengl33PanelApiData));
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	panel_data->FramebufferHandle = 0;
	panel_data->FramebufferTextureHandle = 0;
	panel_data->RenderbufferHandle = 0;
	GLD_CLEAR();
	CreateFramebuffer(&panel_data->FramebufferHandle, &panel_data->FramebufferTextureHandle, &panel_data->RenderbufferHandle, panel->FramebufferWidth, panel->FramebufferHeight);
}
void tuiPanelDestroy_Opengl33(TuiPanel panel)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	if (panel->Instance->IsDamaged == TUI_FALSE)
	{
		GLD_CLEAR();
		GLD_CALL(glDeleteFramebuffers(1, &panel_data->FramebufferHandle));
		GLD_CALL(glDeleteRenderbuffers(1, &panel_data->RenderbufferHandle));
		GLD_CALL(glDeleteTextures(1, &panel_data->FramebufferTextureHandle));
	}
	tuiFree(panel_data);
}
void tuiPanelDrawBatchData_Opengl33(TuiPanel panel, TuiGlyphAtlas atlas, TuiPalette palette, size_t detail_mode, size_t tiles_wide, size_t tiles_tall, size_t sparse_index, const uint8_t* batch_data, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	float* transformed_matrix = (float*)tuiAllocate(sizeof(float) * 16);
	memcpy(transformed_matrix, &kOpenglScreenMatrix[0], 16);
	TransformMatrix(transformed_matrix, panel->FramebufferWidth, panel->FramebufferHeight, left_x, right_x, top_y, bottom_y);
	DrawBatchData(panel_data->FramebufferHandle, panel->FramebufferWidth, panel->FramebufferHeight, panel->Instance, atlas, palette, detail_mode, atlas->BlendMode, tiles_wide, tiles_tall, sparse_index, batch_data, &kOpenglScreenMatrix[0]);
	tuiFree(transformed_matrix);
}
uint8_t* tuiPanelGetPixels_Opengl33(TuiPanel panel, size_t* texture_width, size_t* texture_height, uint8_t* pixel_ptr)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;

	if (pixel_ptr == NULL)
	{
		pixel_ptr = (uint8_t*)tuiAllocate(panel->FramebufferWidth * panel->FramebufferHeight * 4);
	}
	else if (*texture_width != panel->FramebufferWidth || *texture_height != panel->FramebufferHeight)
	{
		pixel_ptr = (uint8_t*)tuiReallocate(pixel_ptr, panel->FramebufferWidth * panel->FramebufferHeight * 4);
	}
	*texture_width = panel->FramebufferWidth;
	*texture_height = panel->FramebufferHeight;
	GLD_CLEAR();
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, panel_data->FramebufferHandle));
	GLD_CALL(glReadPixels(0, 0, panel->FramebufferWidth, panel->FramebufferHeight, GL_RGBA, GL_UNSIGNED_BYTE, pixel_ptr));
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, 0));
	VerticalFlipPixels(pixel_ptr, *texture_width, *texture_height, 4);
	return pixel_ptr;
}
void tuiPanelRender_Opengl33(TuiPanel panel, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;

	RenderTextureToFramebuffer(panel->Instance, panel_data->FramebufferTextureHandle, 0, panel->Instance->PixelWidth, panel->Instance->PixelHeight, left_x, right_x, top_y, bottom_y);
}
void tuiPanelRenderToPanel_Opengl33(TuiPanel panel, TuiPanel target_panel, int left_x, int right_x, int top_y, int bottom_y)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	TuiOpengl33PanelApiData* target_panel_data = (TuiOpengl33PanelApiData*)target_panel->ApiData;
	
	RenderTextureToFramebuffer(panel->Instance, panel_data->FramebufferTextureHandle, target_panel_data->FramebufferHandle, target_panel->FramebufferWidth, target_panel->FramebufferHeight, left_x, right_x, top_y, bottom_y);
}
void tuiPanelClearColor_Opengl33(TuiPanel panel, uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	GLD_CLEAR();
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, panel_data->FramebufferHandle));
	GLD_CALL(glClearColor((float)r / 255.0f, (float)g / 255.0f, (float)b / 255.0f, (float)a / 255.0f));
	GLD_CALL(glClear(GL_COLOR_BUFFER_BIT));
	GLD_CALL(glBindFramebuffer(GL_FRAMEBUFFER, 0));
}
void tuiPanelSetSize_Opengl33(TuiPanel panel, size_t new_width, size_t new_height)
{
	TuiOpengl33PanelApiData* panel_data = (TuiOpengl33PanelApiData*)panel->ApiData;
	if (panel->FramebufferWidth != new_width || panel->FramebufferHeight != new_height)
	{
		panel->FramebufferWidth = new_width;
		panel->FramebufferHeight = new_height;
		
		GLD_CLEAR();		
		if (panel_data->FramebufferHandle != 0)
		{
			GLD_CALL(glDeleteFramebuffers(1, &panel_data->FramebufferHandle));
		}
		if (panel_data->RenderbufferHandle != 0)
		{
			GLD_CALL(glDeleteRenderbuffers(1, &panel_data->RenderbufferHandle));
		}
		if (panel_data->FramebufferTextureHandle != 0)
		{
			GLD_CALL(glDeleteTextures(1, &panel_data->FramebufferTextureHandle));
		}
		CreateFramebuffer(&panel_data->FramebufferHandle, &panel_data->FramebufferTextureHandle, &panel_data->RenderbufferHandle, new_width, new_height);
	}
}